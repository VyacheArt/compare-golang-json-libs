// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package data

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson794297d0DecodeCompareJsonLibsCompareData(in *jlexer.Lexer, out *Simples) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Simples, 0, 1)
			} else {
				*out = Simples{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Simple
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeCompareJsonLibsCompareData(out *jwriter.Writer, in Simples) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Simples) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeCompareJsonLibsCompareData(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Simples) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeCompareJsonLibsCompareData(l, v)
}
func easyjson794297d0DecodeCompareJsonLibsCompareData1(in *jlexer.Lexer, out *Simple) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "likes":
			out.Likes = int(in.Int())
		case "subscribers":
			out.Subscribers = int(in.Int())
		case "is_public":
			out.IsPublic = bool(in.Bool())
		case "is_cool":
			out.IsCool = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeCompareJsonLibsCompareData1(out *jwriter.Writer, in Simple) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		out.Int(int(in.Likes))
	}
	{
		const prefix string = ",\"subscribers\":"
		out.RawString(prefix)
		out.Int(int(in.Subscribers))
	}
	{
		const prefix string = ",\"is_public\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	{
		const prefix string = ",\"is_cool\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCool))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Simple) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeCompareJsonLibsCompareData1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Simple) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeCompareJsonLibsCompareData1(l, v)
}
func easyjson794297d0DecodeCompareJsonLibsCompareData2(in *jlexer.Lexer, out *Mediums) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Mediums, 0, 0)
			} else {
				*out = Mediums{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 Medium
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeCompareJsonLibsCompareData2(out *jwriter.Writer, in Mediums) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mediums) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeCompareJsonLibsCompareData2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mediums) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeCompareJsonLibsCompareData2(l, v)
}
func easyjson794297d0DecodeCompareJsonLibsCompareData3(in *jlexer.Lexer, out *Medium) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "lines":
			if in.IsNull() {
				in.Skip()
				out.Lines = nil
			} else {
				in.Delim('[')
				if out.Lines == nil {
					if !in.IsDelim(']') {
						out.Lines = make([]string, 0, 4)
					} else {
						out.Lines = []string{}
					}
				} else {
					out.Lines = (out.Lines)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Lines = append(out.Lines, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likes":
			out.Likes = int(in.Int())
		case "subscribers":
			out.Subscribers = int(in.Int())
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Ids = nil
			} else {
				in.Delim('[')
				if out.Ids == nil {
					if !in.IsDelim(']') {
						out.Ids = make([]int, 0, 8)
					} else {
						out.Ids = []int{}
					}
				} else {
					out.Ids = (out.Ids)[:0]
				}
				for !in.IsDelim(']') {
					var v8 int
					v8 = int(in.Int())
					out.Ids = append(out.Ids, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_public":
			out.IsPublic = bool(in.Bool())
		case "is_cool":
			out.IsCool = bool(in.Bool())
		case "options":
			if in.IsNull() {
				in.Skip()
				out.Options = nil
			} else {
				in.Delim('[')
				if out.Options == nil {
					if !in.IsDelim(']') {
						out.Options = make([]bool, 0, 64)
					} else {
						out.Options = []bool{}
					}
				} else {
					out.Options = (out.Options)[:0]
				}
				for !in.IsDelim(']') {
					var v9 bool
					v9 = bool(in.Bool())
					out.Options = append(out.Options, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeCompareJsonLibsCompareData3(out *jwriter.Writer, in Medium) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"lines\":"
		out.RawString(prefix)
		if in.Lines == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Lines {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		out.Int(int(in.Likes))
	}
	{
		const prefix string = ",\"subscribers\":"
		out.RawString(prefix)
		out.Int(int(in.Subscribers))
	}
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix)
		if in.Ids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Ids {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_public\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	{
		const prefix string = ",\"is_cool\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCool))
	}
	{
		const prefix string = ",\"options\":"
		out.RawString(prefix)
		if in.Options == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Options {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Bool(bool(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Medium) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeCompareJsonLibsCompareData3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Medium) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeCompareJsonLibsCompareData3(l, v)
}
func easyjson794297d0DecodeCompareJsonLibsCompareData4(in *jlexer.Lexer, out *Heavy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "lines":
			if in.IsNull() {
				in.Skip()
				out.Lines = nil
			} else {
				in.Delim('[')
				if out.Lines == nil {
					if !in.IsDelim(']') {
						out.Lines = make([]string, 0, 4)
					} else {
						out.Lines = []string{}
					}
				} else {
					out.Lines = (out.Lines)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Lines = append(out.Lines, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likes":
			out.Likes = int(in.Int())
		case "subscribers":
			out.Subscribers = int(in.Int())
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Ids = nil
			} else {
				in.Delim('[')
				if out.Ids == nil {
					if !in.IsDelim(']') {
						out.Ids = make([]int, 0, 8)
					} else {
						out.Ids = []int{}
					}
				} else {
					out.Ids = (out.Ids)[:0]
				}
				for !in.IsDelim(']') {
					var v17 int
					v17 = int(in.Int())
					out.Ids = append(out.Ids, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_public":
			out.IsPublic = bool(in.Bool())
		case "is_cool":
			out.IsCool = bool(in.Bool())
		case "options":
			if in.IsNull() {
				in.Skip()
				out.Options = nil
			} else {
				in.Delim('[')
				if out.Options == nil {
					if !in.IsDelim(']') {
						out.Options = make([]bool, 0, 64)
					} else {
						out.Options = []bool{}
					}
				} else {
					out.Options = (out.Options)[:0]
				}
				for !in.IsDelim(']') {
					var v18 bool
					v18 = bool(in.Bool())
					out.Options = append(out.Options, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "medium_elements":
			if in.IsNull() {
				in.Skip()
				out.MediumElements = nil
			} else {
				in.Delim('[')
				if out.MediumElements == nil {
					if !in.IsDelim(']') {
						out.MediumElements = make([]Medium, 0, 0)
					} else {
						out.MediumElements = []Medium{}
					}
				} else {
					out.MediumElements = (out.MediumElements)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Medium
					(v19).UnmarshalEasyJSON(in)
					out.MediumElements = append(out.MediumElements, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeCompareJsonLibsCompareData4(out *jwriter.Writer, in Heavy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"lines\":"
		out.RawString(prefix)
		if in.Lines == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Lines {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		out.Int(int(in.Likes))
	}
	{
		const prefix string = ",\"subscribers\":"
		out.RawString(prefix)
		out.Int(int(in.Subscribers))
	}
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix)
		if in.Ids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Ids {
				if v22 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v23))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_public\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPublic))
	}
	{
		const prefix string = ",\"is_cool\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCool))
	}
	{
		const prefix string = ",\"options\":"
		out.RawString(prefix)
		if in.Options == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.Options {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.Bool(bool(v25))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"medium_elements\":"
		out.RawString(prefix)
		if in.MediumElements == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.MediumElements {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Heavy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeCompareJsonLibsCompareData4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Heavy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeCompareJsonLibsCompareData4(l, v)
}
func easyjson794297d0DecodeCompareJsonLibsCompareData5(in *jlexer.Lexer, out *Heavies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Heavies, 0, 0)
			} else {
				*out = Heavies{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v28 Heavy
			(v28).UnmarshalEasyJSON(in)
			*out = append(*out, v28)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeCompareJsonLibsCompareData5(out *jwriter.Writer, in Heavies) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v29, v30 := range in {
			if v29 > 0 {
				out.RawByte(',')
			}
			(v30).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Heavies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeCompareJsonLibsCompareData5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Heavies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeCompareJsonLibsCompareData5(l, v)
}
